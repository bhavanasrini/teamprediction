from __future__ import division
from bs4 import BeautifulSoup
import requests
from collections import Counter
import functools
import csv

# LISTS FOR PROGRAM
players = []
stats = []
pOfXsWins = []
pOfXsLosses = []
probs_win = []
probs_lose = []
first_down_prob = []
passing_prob = []
rushing_gain_prob = []
turnover_prob = []
passing_gain_prob = []
# SIMPLE FOLLOWS
outcome = []
prob_t1_win = []
prob_t2_win = []
q1 = []
q2 = []
q3 = []
q4 = []
probabilities = []

# GRAB STATS FOR TEAM ONE AND TEAM TWO
def grabstats(game):

    html = requests.get(game).text
    soup = BeautifulSoup(html, 'html5lib')

    # GRAB ALL STAT INFO
    for td_tag in soup.find_all('td'):
        stat = td_tag.text
        stats.append(stat)

# NAME OF EACH TEAM
def team1():
    return stats[0]

def team2():
    return stats[6]

# RETURNS WINNING TEAM FOR THAT GAME
def winning_team():
    if t1_points_total() > t2_points_total():
        return 1
    else:
        return 2
# POINTS SCORED IN EACH QUARTER
def t1_points_q1():
    return float(stats[1])
def t1_points_q2():
    return float(stats[2])
def t1_points_q3():
    return float(stats[3])
def t1_points_q4():
    return float(stats[4])
def t1_points_total():
    return float(stats[5])

def t2_points_q1():
    return float(stats[7])
def t2_points_q2():
    return float(stats[8])
def t2_points_q3():
    return float(stats[9])
def t2_points_q4():
    return float(stats[10])
def t2_points_total():
    return float(stats[11])

# LIST OF ATTRIBUTES

# WHO SCORED MORE POINTS IN THE FIRST QUARTER
def attr1():
    if t1_points_q1() > t2_points_q1():
        q1.append(1)
    else:
        q1.append(0)
    #print(q1)
# WHO SCORED MORE POINTS IN THE SECOND QUARTER
def attr2():
    if t1_points_q2() > t2_points_q2():
        q2.append(1)
    else:
        q2.append(0)
    #print(q2)
# WHO SCORED MORE POINTS IN THE THIRD QUARTER
def attr3():
    if t1_points_q3() > t2_points_q3():
        q3.append(1)
    else:
        q3.append(0)
    #print(q3)
# WHO SCORED MORE POINTS IN THE FOURTH QUARTER
def attr4():
    if t1_points_q4() > t2_points_q4():
        q4.append(1)
    else:
        q4.append(0)
    #print(q4)

def run_attrs():
    # CALLS ALL ATTRIBUTES TO ADD TO THE LIST
    attr1()
    attr2()
    attr3()
    attr4()
    if winning_team() == 1:
        outcome.append(1)
    else:
        outcome.append(0)
    return

# CHANGE TO ACTUAL PROBABILITIES
def prob_of_win():
    return 0.5
def prob_of_lose():
    return 0.5

# PROBAILITIES OF ATTRIBUTES (P(X))
def run_probabilites():
    probabilities.append(p_x(1, q1))
    probabilities.append(p_x(0, q1))
    probabilities.append(p_x(1, q2))
    probabilities.append(p_x(0, q2))
    probabilities.append(p_x(1, q3))
    probabilities.append(p_x(0, q3))
    probabilities.append(p_x(1, q4))
    probabilities.append(p_x(0, q4))

def p_x(x, list):
    a = Counter(list)
    return (a[x] / len(list))

def p_x_y(x):
    #ASSUMING INDEPENDENT VARIABLES
    return p_x(x, list) * 0.5 # switch to p_y(y, list2), but for now = 0.5

def write_CSV_start():
    with open("data2.csv", "w") as e:
        wr = csv.writer(e)
        #F = FIRST DOWN PROB
        #A = passing_first_down_prob
        #T = TURNOVER PROB
        #P = PASSING PROB
        #O = OUTCOME
        #wr.writerow("FATPO")
        for i in zip(probabilities[0:1], probabilities[2:3], probabilities[4:5], probabilities[6:7], outcome):
            wr.writerow(i)
        del probabilities[:]

def append_CSV():
    with open("data2.csv", "a") as f:
        wr = csv.writer(f)
        # The last row is for the neural_network (it shows likelihood of price going up or staying the same)
        for i in zip(probabilities[0:1], probabilities[2:3], probabilities[4:5], probabilities[6:7], outcome[-1:]):
            wr.writerow(i)
        del probabilities[:]
def build_up_p_x_given_win_list():
    # NEED TO FILL IN THE PROBABILITY OF X OCCURING GIVEN A WIN
    z = prob_of_win()
    if team1() == teamname:
        pOfXsWins.append((probabilities[0] * z) / z)
        pOfXsWins.append((probabilities[2] * z) / z)
        pOfXsWins.append((probabilities[4] * z) / z)
        pOfXsWins.append((probabilities[6] * z) / z)
    else:
        pOfXsWins.append((probabilities[1] * z) / z)
        pOfXsWins.append((probabilities[3] * z) / z)
        pOfXsWins.append((probabilities[5] * z) / z)
        pOfXsWins.append((probabilities[7] * z) / z)
def build_up_p_x_given_loss_list():
    # NEED TO FILL IN THE PROBABILITY OF X OCCURING GIVEN A LOSS
    #LIST = (P(X)*P(Y))/P(Y)
    z = prob_of_lose()
    if team1() == teamname:
        pOfXsLosses.append((probabilities[1] * z) / z)
        pOfXsLosses.append((probabilities[3] * z) / z)
        pOfXsLosses.append((probabilities[5] * z) / z)
        pOfXsLosses.append((probabilities[7] * z) / z)
    else:
        pOfXsLosses.append((probabilities[0] * z) / z)
        pOfXsLosses.append((probabilities[2] * z) / z)
        pOfXsLosses.append((probabilities[4] * z) / z)
        pOfXsLosses.append((probabilities[6] * z) / z)
# FOR EACH X ATTR NEED TO FIND X | Y
def training():
    # LIST * P(Y)
    t1_win = prob_of_win()
    t1_lose = prob_of_lose()
    for i in pOfXsWins:
        probs_win.append(i * t1_win)
    for i in pOfXsLosses:
        probs_lose.append(i * t1_lose)
#BASED OFF OF INFO FROM TRAINING WHO SHOULD WIN


def run_program():

    run_attrs()
    run_probabilites()
    build_up_p_x_given_win_list()
    build_up_p_x_given_loss_list()
    training()


def classify():
    # argmax Î  of list
    totalmax = []

    answer = []
    prob_win = functools.reduce(lambda x, y: x * y if y != 0 and x != 0 else 0.001, probs_win) * prob_of_win()
    prob_loss = functools.reduce(lambda x, y: x * y if y != 0 and x != 0 else 0.001, probs_lose) * prob_of_lose()

    if team1() == teamnames[0]:
        answer.append(prob_win)
        answer.append(prob_loss)
    if team2() == teamnames[0]:
        answer.append(prob_loss)
        answer.append(prob_win)


    max_value = max(answer)
    max_index = answer.index(max_value)
    print("Team", teamnames[0], " chance of winning given all variables: ", max_value)
    #print(answer)


    if max_index == 0 and team1() == teamnames[0]:
        print(teamnames[0], " is going to win!")
    if max_index == 1 and team2() == teamnames[0]:
        print(teamnames[0]," is going to lose!")

def classify2():
    answer2 = []
    prob_win = functools.reduce(lambda x, y: x * y if y != 0 and x != 0 else 0.001, probs_win) * prob_of_win()
    prob_loss = functools.reduce(lambda x, y: x * y if y != 0 and x != 0 else 0.001, probs_lose) * prob_of_lose()

    if team1() == teamnames[1]:
        answer2.append(prob_win)
        answer2.append(prob_loss)
    if team2() == teamnames[1]:
        answer2.append(prob_loss)
        answer2.append(prob_win)
    max_value2 = max(answer2)
    #print(answer2)
    max_index2 = answer2.index(max_value2)
    print("Team", teamnames[1], " chance of winning given all variables: ", max_value2)
    if max_index2 == 0 and team1() == teamnames[1]:
        print(teamnames[1], " is going to win!")

    if max_index2 == 1 and team2() == teamnames[1]:
        print(teamnames[1], " is going to lose!")
def refresh():
    del stats[:]
    del probabilities[:]
    del q1[:]
    del q2[:]
    del q3[:]
    del q4[:]
    del outcome[:]
def del_lists():
    del stats[:]
    del probabilities[:]
if __name__ == "__main__":
    # FIRST GAME
    teamnames = []
    teamname = 'DEN'
    teamnames.append(teamname)
    grabstats(game="http://www.espn.com/nfl/matchup?gameId=400951834")
    stats = [x.replace('\t', '').replace('\n', '') for x in stats]
    run_program()
    #write_CSV_start()
    del_lists()
    grabstats(game="http://www.espn.com/nfl/matchup?gameId=400951673")
    stats = [x.replace('\t', '').replace('\n', '') for x in stats]
    run_program()
    append_CSV()
    classify()
    refresh()


    # TEAM 2
    teamname = 'PIT'
    teamnames.append(teamname)
    grabstats(game="http://www.espn.com/nfl/game?gameId=400951643")
    stats = [x.replace('\t', '').replace('\n', '') for x in stats]
    run_program()
    #write_CSV_start()
    del_lists()
    grabstats(game="http://www.espn.com/nfl/matchup?gameId=400951574")
    stats = [x.replace('\t', '').replace('\n', '') for x in stats]
    run_program()
    append_CSV()
    classify2()


    '''Add all games from broncos then add all games from opposing team,
    add more attributes, probabilities, etc '''
